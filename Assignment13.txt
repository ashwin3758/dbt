1) Create a union of two queries that shows the names, cities, and ratings of all
customers. Those with rating of 200 or greater will also have the words “High
Rating”, while the others will have the words “Low Rating”.

mysql> select Cname, City, Rating, 'High Rating' as Rating_Type from Customers where Rating >= 200
    -> union
    -> select Cname, City, Rating, 'Low Rating' as Rating_Type from Customers where Rating < 200;
+----------+----------+--------+-------------+
| Cname    | City     | Rating | Rating_Type |
+----------+----------+--------+-------------+
| Giovanni | Rome     |    200 | High Rating |
| Liu      | San Jose |    200 | High Rating |
| Grass    | Berlin   |    300 | High Rating |
| Cisneros | San Jose |    300 | High Rating |
| Hoffin   | London   |    100 | Low Rating  |
| Clemens  | London   |    100 | Low Rating  |
| Pereira  | Rome     |    100 | Low Rating  |
+----------+----------+--------+-------------+
7 rows in set (0.00 sec)

2) Write a command that produces the name and number of each salesperson and
each customer with more than one current order. Put the results in alphabetical
order.

mysql> (select cnum as num, cname as name, 'Customer' as Type from customers where cnum in (select cnum from orders group by cnum having count(*)>1))
    -> union all
    -> (select snum as num, sname as name, 'SalesPeople' as Type from salespeople where snum in (select snum from orders group by snum having count(*)>1))
    -> order by name, num;
+------+----------+-------------+
| num  | name     | Type        |
+------+----------+-------------+
| 2008 | Cisneros | Customer    |
| 2006 | Clemens  | Customer    |
| 2004 | Grass    | Customer    |
| 1001 | Peel     | SalesPeople |
| 1007 | Rifkin   | SalesPeople |
| 1002 | Srres    | SalesPeople |
+------+----------+-------------+
6 rows in set (0.00 sec)

3) Form a union of three queries. Have the first select the snums of all salespeople in
San Jose; the second, the cnums of all customers in San Jose; and the third the
onums of all orders on October 3. Retain duplicates between the last two queries
but eliminate any redundancies between either of them and the first.
(Note: in the sample tables as given, there would be no such redundancy. This is
besides the point.

mysql> select snum as num from salespeople where city='san jose'
    -> union all
    -> select cnum as num from customers where city='san jose'
    -> union all
    -> select onum as num from orders where odate='1990-10-03';
+------+
| num  |
+------+
| 1002 |
| 2003 |
| 2008 |
| 3001 |
| 3003 |
| 3002 |
| 3005 |
| 3006 |
+------+
8 rows in set (0.00 sec)